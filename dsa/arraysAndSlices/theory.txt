Arrays:
An array is a fixed-size sequence of elements of the same type.
The length of an array is part of its type, which means arrays cannot be resized.


Slices:
A slice is a dynamically-sized, flexible view into the elements of an array.
Slices are more versatile than arrays and are commonly used in .
Syntax:

Arrays:
var arr [5]int // array of 5 integers
arr := [5]int{1, 2, 3, 4, 5} // array with initialization


Slices:
var slice []int // slice of integers
slice := []int{1, 2, 3, 4, 5} // slice with initialization


Common Operations
Insertion:

Arrays:

Direct assignment since arrays are fixed-size.
arr[0] = 10
Slices:

Use the built-in append function.


slice = append(slice, 10)
Deletion:

Arrays:

Since arrays are fixed in size, deletion isn't typically performed; however, elements can be set to zero values.


arr[0] = 0
Slices:

Use slicing to remove elements.


// Remove element at index i
slice = append(slice[:i], slice[i+1:]...)
Traversal:

Arrays and Slices:
Use a for loop.


// Array traversal
for i := 0; i < len(arr); i++ {
    fmt.Println(arr[i])
}

// Slice traversal
for i, v := range slice {
    fmt.Println(i, v)
}
3. Examples and Exercises
Example 1: Basic Array Operations



package main

import "fmt"

func main() {
    var arr [5]int
    arr = [5]int{1, 2, 3, 4, 5}

    // Insertion
    arr[0] = 10

    // Traversal
    for i := 0; i < len(arr); i++ {
        fmt.Println(arr[i])
    }

    // Deletion (set to zero)
    arr[1] = 0
    fmt.Println("After deletion:", arr)
}
Example 2: Basic Slice Operations



package main

import "fmt"

func main() {
    slice := []int{1, 2, 3, 4, 5}

    // Insertion
    slice = append(slice, 6)

    // Traversal
    for i, v := range slice {
        fmt.Println(i, v)
    }

    // Deletion
    i := 2
    slice = append(slice[:i], slice[i+1:]...)
    fmt.Println("After deletion:", slice)
}
Exercise 1: Implement a function to find the maximum value in an array.



func findMax(arr [5]int) int {
    max := arr[0]
    for _, v := range arr {
        if v > max {
            max = v
        }
    }
    return max
}

func main() {
    arr := [5]int{1, 2, 3, 4, 5}
    fmt.Println("Max value:", findMax(arr))
}
Exercise 2: Implement a function to reverse a slice.



func reverseSlice(slice []int) []int {
    for i, j := 0, len(slice)-1; i < j; i, j = i+1, j-1 {
        slice[i], slice[j] = slice[j], slice[i]
    }
    return slice
}

func main() {
    slice := []int{1, 2, 3, 4, 5}
    fmt.Println("Reversed slice:", reverseSlice(slice))
}