What is a Stack?
A stack is a linear data structure that follows the Last In, First Out (LIFO) principle.
The last element added to the stack is the first one to be removed.
Common uses include function call management in programming languages, undo mechanisms in text editors, and syntax parsing.
Common Operations
Push: Add an element to the top of the stack.
Pop: Remove and return the top element of the stack.
Peek: Return the top element without removing it.
IsEmpty: Check if the stack is empty.
Size: Return the number of elements in the stack.
Implementation using Arrays and Linked Lists
Stack Implementation using Arrays
go

package main

import (
	"errors"
	"fmt"
)

type Stack struct {
	items []int
}

func (s *Stack) Push(item int) {
	s.items = append(s.items, item)
}

func (s *Stack) Pop() (int, error) {
	if len(s.items) == 0 {
		return 0, errors.New("stack is empty")
	}
	item := s.items[len(s.items)-1]
	s.items = s.items[:len(s.items)-1]
	return item, nil
}

func (s *Stack) Peek() (int, error) {
	if len(s.items) == 0 {
		return 0, errors.New("stack is empty")
	}
	return s.items[len(s.items)-1], nil
}

func (s *Stack) IsEmpty() bool {
	return len(s.items) == 0
}

func (s *Stack) Size() int {
	return len(s.items)
}

func main() {
	stack := Stack{}
	stack.Push(1)
	stack.Push(2)
	stack.Push(3)
	fmt.Println(stack.Peek()) // Output: 3
	stack.Pop()
	fmt.Println(stack.Peek()) // Output: 2
}
Stack Implementation using Linked Lists
go

package main

import (
	"errors"
	"fmt"
)

type Node struct {
	value int
	next  *Node
}

type Stack struct {
	head *Node
	size int
}

func (s *Stack) Push(value int) {
	newNode := &Node{value: value, next: s.head}
	s.head = newNode
	s.size++
}

func (s *Stack) Pop() (int, error) {
	if s.head == nil {
		return 0, errors.New("stack is empty")
	}
	value := s.head.value
	s.head = s.head.next
	s.size--
	return value, nil
}

func (s *Stack) Peek() (int, error) {
	if s.head == nil {
		return 0, errors.New("stack is empty")
	}
	return s.head.value, nil
}

func (s *Stack) IsEmpty() bool {
	return s.head == nil
}

func (s *Stack) Size() int {
	return s.size
}

func main() {
	stack := Stack{}
	stack.Push(1)
	stack.Push(2)
	stack.Push(3)
	fmt.Println(stack.Peek()) // Output: 3
	stack.Pop()
	fmt.Println(stack.Peek()) // Output: 2
}
Examples and Exercises
Example 1: Balanced Parentheses

Write a function to check if a string of parentheses is balanced.

go

func isBalanced(s string) bool {
	stack := Stack{}
	for _, char := range s {
		if char == '(' {
			stack.Push(int(char))
		} else if char == ')' {
			if stack.IsEmpty() {
				return false
			}
			stack.Pop()
		}
	}
	return stack.IsEmpty()
}

func main() {
	fmt.Println(isBalanced("((()))")) // Output: true
	fmt.Println(isBalanced("(()"))    // Output: false
}
Exercise 1: Implement a MinStack

Implement a stack that supports push, pop, top, and retrieving the minimum element in constant time.

go

type MinStack struct {
	stack    []int
	minStack []int
}

func (s *MinStack) Push(x int) {
	s.stack = append(s.stack, x)
	if len(s.minStack) == 0 || x <= s.minStack[len(s.minStack)-1] {
		s.minStack = append(s.minStack, x)
	}
}

func (s *MinStack) Pop() {
	if len(s.stack) == 0 {
		return
	}
	top := s.stack[len(s.stack)-1]
	s.stack = s.stack[:len(s.stack)-1]
	if top == s.minStack[len(s.minStack)-1] {
		s.minStack = s.minStack[:len(s.minStack)-1]
	}
}

func (s *MinStack) Top() int {
	if len(s.stack) == 0 {
		return 0
	}
	return s.stack[len(s.stack)-1]
}

func (s *MinStack) GetMin() int {
	if len(s.minStack) == 0 {
		return 0
	}
	return s.minStack[len(s.minStack)-1]
}

func main() {
	minStack := MinStack{}
	minStack.Push(-2)
	minStack.Push(0)
	minStack.Push(-3)
	fmt.Println(minStack.GetMin()) // Output: -3
	minStack.Pop()
	fmt.Println(minStack.Top())    // Output: 0
	fmt.Println(minStack.GetMin()) // Output: -2
}
These examples and exercises should provide a solid foundation for understanding and implementing stacks in Go.